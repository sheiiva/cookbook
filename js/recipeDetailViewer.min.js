class RecipeDetailViewer {
    constructor() {
        this.currentLanguage = this.getLanguageFromURL() || 'en';
        this.recipesData = null;
    }

    getLanguageFromURL() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get('lang');
    }

    updateURL() {
        const urlParams = new URLSearchParams(window.location.search);
        urlParams.set('lang', this.currentLanguage);
        const newURL = `${window.location.pathname}?${urlParams.toString()}`;
        window.history.replaceState({}, '', newURL);
    }

    updateLanguageButton() {
        const currentLangSpan = document.querySelector('.current-lang');
        if (currentLangSpan) {
            const languageNames = {
                'en': 'English',
                'fr': 'Français',
                'es': 'Español'
            };
            currentLangSpan.textContent = languageNames[this.currentLanguage];
        }
    }

    async init() {
        await this.loadRecipesForLanguage(this.currentLanguage);
        this.updateLanguageButton();
        this.setupLanguageToggle();
        this.displayRecipe();
    }

    async loadRecipesForLanguage(lang) {
        const filename = `data/cookbook-data-${lang}.json`;
        const response = await fetch(filename);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        this.recipesData = await response.json();
    }

    setupLanguageToggle() {
        const languageToggle = document.getElementById('language-toggle');
        if (languageToggle) {
            languageToggle.addEventListener('click', async () => {
                const languages = ['en', 'fr', 'es'];
                const currentIndex = languages.indexOf(this.currentLanguage);
                const nextIndex = (currentIndex + 1) % languages.length;
                this.currentLanguage = languages[nextIndex];
                
                const currentLangSpan = languageToggle.querySelector('.current-lang');
                if (currentLangSpan) {
                    const languageNames = {
                        'en': 'English',
                        'fr': 'Français',
                        'es': 'Español'
                    };
                    currentLangSpan.textContent = languageNames[this.currentLanguage];
                }
                
                try {
                    await this.loadRecipesForLanguage(this.currentLanguage);
                    this.displayRecipe();
                    // Update URL to reflect current language
                    this.updateURL();
                } catch (error) {
                    console.error('Failed to load recipes for new language:', error);
                }
            });
        }
    }

    displayRecipe() {
        const urlParams = new URLSearchParams(window.location.search);
        const recipeId = urlParams.get('id');
        
        console.log('Displaying recipe:', recipeId, 'in language:', this.currentLanguage);
        console.log('Available recipes:', this.recipesData?.recipes?.map(r => r.id));
        
        if (!recipeId || !this.recipesData) {
            console.log('Missing recipeId or recipesData');
            this.showError('Recipe not found');
            return;
        }

        const recipe = this.recipesData.recipes.find(r => r.id === recipeId);
        
        if (!recipe) {
            console.log('Recipe not found in current language data');
            this.showError('Recipe not found');
            return;
        }

        // Update page title
        document.title = recipe.title;
        
        // Update page header
        const titleElement = document.querySelector('h1[data-i18n="my_recipe_journal"]');
        if (titleElement && this.recipesData.ui.title) {
            titleElement.textContent = this.recipesData.ui.title;
        }

        const recipeContent = document.getElementById('recipe-content');
        recipeContent.innerHTML = `
            <div class="recipe-header">
                <h1 class="recipe-title">${recipe.title}</h1>
                <img src="images/${recipe.image}" alt="${recipe.title}" class="recipe-image">
                <p class="recipe-description">${recipe.description}</p>
            </div>
            
            <div class="recipe-section recipe-ingredients">
                <h2>Ingredients</h2>
                <ul>
                    ${(recipe.ingredients || []).map(ingredient => `<li>${ingredient}</li>`).join('')}
                </ul>
            </div>
            
            <div class="recipe-section recipe-instructions">
                <h2>Instructions</h2>
                <ol>
                    ${(recipe.instructions || []).map(instruction => `<li>${instruction}</li>`).join('')}
                </ol>
            </div>
        `;
    }

    showError(message) {
        const recipeContent = document.getElementById('recipe-content');
        recipeContent.innerHTML = `
            <div class="error">
                <h2>Error</h2>
                <p>${message}</p>
                <a href="index.html">← Back to Home</a>
            </div>
        `;
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const recipeViewer = new RecipeDetailViewer();
    recipeViewer.init();
}); 