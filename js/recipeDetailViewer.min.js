class RecipeDetailViewer {
    constructor() {
        this.currentLanguage = 'en';
        this.recipesData = null;
    }

    async init() {
        await this.loadRecipesForLanguage(this.currentLanguage);
        this.setupLanguageToggle();
        this.displayRecipe();
    }

    async loadRecipesForLanguage(lang) {
        const filename = `data/cookbook-data-${lang}.json`;
        const response = await fetch(filename);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        this.recipesData = await response.json();
    }

    setupLanguageToggle() {
        const languageToggle = document.getElementById('language-toggle');
        if (languageToggle) {
            languageToggle.addEventListener('click', async () => {
                const languages = ['en', 'fr', 'es'];
                const currentIndex = languages.indexOf(this.currentLanguage);
                const nextIndex = (currentIndex + 1) % languages.length;
                this.currentLanguage = languages[nextIndex];
                
                const currentLangSpan = languageToggle.querySelector('.current-lang');
                if (currentLangSpan) {
                    const languageNames = {
                        'en': 'English',
                        'fr': 'Français',
                        'es': 'Español'
                    };
                    currentLangSpan.textContent = languageNames[this.currentLanguage];
                }
                
                try {
                    await this.loadRecipesForLanguage(this.currentLanguage);
                    this.displayRecipe();
                } catch (error) {
                    console.error('Failed to load recipes for new language:', error);
                }
            });
        }
    }

    displayRecipe() {
        const urlParams = new URLSearchParams(window.location.search);
        const recipeId = urlParams.get('id');
        
        if (!recipeId || !this.recipesData) {
            this.showError('Recipe not found');
            return;
        }

        const recipe = this.recipesData.recipes.find(r => r.id === recipeId);
        
        if (!recipe) {
            this.showError('Recipe not found');
            return;
        }

        // Update page title
        document.title = recipe.title;
        
        // Update page header
        const titleElement = document.querySelector('h1[data-i18n="my_recipe_journal"]');
        if (titleElement && this.recipesData.ui.title) {
            titleElement.textContent = this.recipesData.ui.title;
        }

        const recipeContent = document.getElementById('recipe-content');
        recipeContent.innerHTML = `
            <div class="recipe-detail">
                <h1>${recipe.title}</h1>
                <p class="recipe-description">${recipe.description}</p>
                
                <div class="recipe-image">
                    <img src="images/${recipe.image}" alt="${recipe.title}" style="max-width: 100%; height: auto;">
                </div>
                
                <div class="recipe-ingredients">
                    <h2>Ingredients</h2>
                    <ul>
                        ${recipe.ingredients.map(ingredient => `<li>${ingredient}</li>`).join('')}
                    </ul>
                </div>
                
                <div class="recipe-instructions">
                    <h2>Instructions</h2>
                    <ol>
                        ${recipe.instructions.map(instruction => `<li>${instruction}</li>`).join('')}
                    </ol>
                </div>
                
                <div class="recipe-tags">
                    <h3>Tags:</h3>
                    <span>${recipe.tags.join(', ')}</span>
                </div>
            </div>
        `;
    }

    showError(message) {
        const recipeContent = document.getElementById('recipe-content');
        recipeContent.innerHTML = `
            <div class="error">
                <h2>Error</h2>
                <p>${message}</p>
                <a href="index.html">← Back to Home</a>
            </div>
        `;
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const recipeViewer = new RecipeDetailViewer();
    recipeViewer.init();
}); 