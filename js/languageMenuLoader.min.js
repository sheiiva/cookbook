class LanguageMenuLoader {
    constructor() {
        this.languages = [];
        this.currentLanguage = 'en';
    }

    async init() {
        try {
            // Load languages from JSON file
            const response = await fetch('data/languages.json');
            if (!response.ok) {
                throw new Error(`Failed to load languages: ${response.status}`);
            }
            
            const data = await response.json();
            this.languages = data.languages;
            
            // Get saved language preference
            this.currentLanguage = localStorage.getItem('cookbook-language') || 'en';
            
            // Populate language menu
            this.populateLanguageMenu();
            
            // Update current language display
            this.updateCurrentLanguageDisplay();
        } catch (error) {
            console.error('Error loading language menu:', error);
            // Fallback to hardcoded languages if JSON fails
            this.loadFallbackLanguages();
        }
    }

    populateLanguageMenu() {
        const languageMenu = document.getElementById('language-menu');
        if (!languageMenu) {
            console.error('Language menu element not found');
            return;
        }
        
        // Clear existing options
        languageMenu.innerHTML = '';
        
        // Add language options
        this.languages.forEach(lang => {
            const langOption = document.createElement('div');
            langOption.className = 'lang-option';
            langOption.setAttribute('data-lang', lang.code);
            langOption.textContent = lang.native;
            
            // Mark current language as active
            if (lang.code === this.currentLanguage) {
                langOption.classList.add('active');
            }
            
            languageMenu.appendChild(langOption);
        });
    }

    updateCurrentLanguageDisplay() {
        const currentLangElement = document.querySelector('.current-lang');
        if (!currentLangElement) {
            console.error('Current language element not found');
            return;
        }
        
        const currentLang = this.languages.find(lang => lang.code === this.currentLanguage);
        if (currentLang) {
            currentLangElement.textContent = currentLang.native;
        }
    }

    loadFallbackLanguages() {
        // Fallback languages if JSON fails to load
        this.languages = [
            { code: 'en', name: 'English', native: 'English' },
            { code: 'fr', name: 'French', native: 'Français' },
            { code: 'es', name: 'Spanish', native: 'Español' },
            { code: 'de', name: 'German', native: 'Deutsch' },
            { code: 'it', name: 'Italian', native: 'Italiano' },
            { code: 'pt', name: 'Portuguese', native: 'Português' },
            { code: 'nl', name: 'Dutch', native: 'Nederlands' },
            { code: 'ru', name: 'Russian', native: 'Русский' },
            { code: 'zh', name: 'Chinese', native: '中文' },
            { code: 'ja', name: 'Japanese', native: '日本語' },
            { code: 'ko', name: 'Korean', native: '한국어' }
        ];
        
        this.populateLanguageMenu();
        this.updateCurrentLanguageDisplay();
    }

    getLanguageByCode(code) {
        return this.languages.find(lang => lang.code === code);
    }

    getCurrentLanguage() {
        return this.currentLanguage;
    }

    setCurrentLanguage(code) {
        this.currentLanguage = code;
        this.updateCurrentLanguageDisplay();
        
        // Update active state in menu
        const langOptions = document.querySelectorAll('.lang-option');
        langOptions.forEach(option => {
            option.classList.remove('active');
            if (option.getAttribute('data-lang') === code) {
                option.classList.add('active');
            }
        });
    }
}

// Initialize language menu loader
document.addEventListener('DOMContentLoaded', () => {
    window.languageMenuLoader = new LanguageMenuLoader();
    window.languageMenuLoader.init();
}); 