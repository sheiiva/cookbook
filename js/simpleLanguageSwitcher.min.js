class SimpleLanguageSwitcher {
    constructor() {
        this.toggleButton = null;
        this.languageMenu = null;
        this.isMenuVisible = false;
    }

    init() {
        this.toggleButton = document.getElementById('language-toggle');
        this.languageMenu = document.getElementById('language-menu');
        
        if (!this.toggleButton || !this.languageMenu) {
            console.error('Language switcher elements not found');
            return;
        }

        // Add event listeners
        this.toggleButton.addEventListener('click', (e) => this.handleToggleClick(e));
        
        // Close menu when clicking outside
        document.addEventListener('click', (e) => this.handleOutsideClick(e));
        
        // Handle language option clicks
        this.languageMenu.addEventListener('click', (e) => this.handleLanguageOptionClick(e));
    }

    handleToggleClick(e) {
        e.preventDefault();
        e.stopImmediatePropagation();
        
        this.isMenuVisible = !this.isMenuVisible;
        
        if (this.isMenuVisible) {
            this.showMenu();
        } else {
            this.hideMenu();
        }
    }

    handleOutsideClick(e) {
        if (!this.languageMenu.contains(e.target) && !this.toggleButton.contains(e.target)) {
            this.hideMenu();
        }
    }

    handleLanguageOptionClick(e) {
        const langOption = e.target.closest('.lang-option');
        if (!langOption) return;
        
        e.preventDefault();
        e.stopImmediatePropagation();
        
        const languageCode = langOption.getAttribute('data-lang');
        
        if (languageCode) {
            this.changeLanguage(languageCode);
            this.hideMenu();
        }
    }

    showMenu() {
        this.languageMenu.classList.add('show');
        this.isMenuVisible = true;
        
        // Remove any problematic inline styles
        this.languageMenu.style.removeProperty('background');
        this.languageMenu.style.removeProperty('background-color');
        this.languageMenu.style.removeProperty('border');
        this.languageMenu.style.removeProperty('color');
        
        // Force menu visibility if needed
        this.languageMenu.style.display = 'block';
        this.languageMenu.style.opacity = '1';
        this.languageMenu.style.visibility = 'visible';
        this.languageMenu.style.transform = 'translateY(0)';
        this.languageMenu.style.pointerEvents = 'auto';
    }

    hideMenu() {
        this.languageMenu.classList.remove('show');
        this.isMenuVisible = false;
    }

    changeLanguage(languageCode) {
        // Update language menu loader
        if (window.languageMenuLoader) {
            window.languageMenuLoader.setCurrentLanguage(languageCode);
        }
        
        // Save to localStorage
        localStorage.setItem('cookbook-language', languageCode);
        
        // Call scalable translator if available
        if (window.scalableTranslator) {
            window.scalableTranslator.changeLanguage(languageCode);
        } else if (window.dynamicTranslator) {
            window.dynamicTranslator.changeLanguage(languageCode);
        } else {
            window.location.reload();
        }
    }

    updateLanguageDisplay(languageCode) {
        const currentLangElement = document.querySelector('.current-lang');
        if (currentLangElement && window.languageMenuLoader) {
            const language = window.languageMenuLoader.getLanguageByCode(languageCode);
            if (language) {
                currentLangElement.textContent = language.native;
            }
        }
    }

    showLanguageChangeFeedback() {
        // Optional: Show a brief feedback message
        const feedback = document.createElement('div');
        feedback.textContent = 'Language changed!';
        feedback.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #667eea;
            color: white;
            padding: 10px 20px;
            border-radius: 8px;
            z-index: 10000;
            animation: fadeInOut 2s ease-in-out;
        `;
        document.body.appendChild(feedback);
        
        setTimeout(() => {
            if (feedback.parentNode) {
                feedback.parentNode.removeChild(feedback);
            }
        }, 2000);
    }
}

// Initialize simple language switcher
document.addEventListener('DOMContentLoaded', () => {
    // Wait a bit for other scripts to load
    setTimeout(() => {
        window.simpleLanguageSwitcher = new SimpleLanguageSwitcher();
        window.simpleLanguageSwitcher.init();
    }, 100);
}); 