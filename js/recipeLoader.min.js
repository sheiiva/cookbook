// Recipe Loader - Dynamically loads recipes from JSON database
class RecipeLoader {
    constructor() {
        this.recipesData = null;
        this.init();
    }

    async init() {
        console.log('=== RECIPE LOADER INIT ===');
        try {
            console.log('Loading recipes from data/cookbook-data.json...');
            const response = await fetch('data/cookbook-data.json');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            this.recipesData = { recipes: data.recipes, categories: data.ui.categories };
            console.log('Recipes loaded successfully:', this.recipesData);
            this.renderRecipes();
        } catch (error) {
            console.error('Failed to load recipes:', error);
            this.renderFallback();
        }
    }

    renderRecipes() {
        console.log('=== RENDER RECIPES ===');
        const mainContent = document.querySelector('.main-content');
        console.log('Main content element:', mainContent);
        console.log('Recipes data:', this.recipesData);
        
        if (!mainContent || !this.recipesData) {
            console.error('Missing mainContent or recipesData');
            return;
        }

        mainContent.innerHTML = '';
        console.log('Cleared main content');

        // Group recipes by tags
        const recipesByCategory = {};
        
        this.recipesData.recipes.forEach(recipe => {
            if (recipe.tags) {
                recipe.tags.forEach(tag => {
                    if (!recipesByCategory[tag]) {
                        recipesByCategory[tag] = [];
                    }
                    recipesByCategory[tag].push(recipe);
                });
            }
        });

        // Render each category
        Object.entries(this.recipesData.categories).forEach(([categoryId, categoryName]) => {
            console.log('Processing category:', categoryId, categoryName);
            
            const recipesInCategory = recipesByCategory[categoryId] || [];
            if (recipesInCategory.length === 0) {
                console.log('No recipes found for category:', categoryId);
                return;
            }
            
            const recipeList = document.createElement('div');
            recipeList.className = 'recipe-list';
            recipeList.id = `${categoryId}-list`;

            const title = document.createElement('h2');
            title.textContent = categoryName;
            recipeList.appendChild(title);

            const ul = document.createElement('ul');
            ul.id = `${categoryId}-list`;

            recipesInCategory.forEach(recipe => {
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.href = `recipe-template.html?id=${recipe.id}`;
                a.textContent = recipe.title;
                a.setAttribute('data-category', categoryId);
                a.setAttribute('data-recipe-id', recipe.id);
                console.log('Created recipe link:', recipe.title);
                li.appendChild(a);
                ul.appendChild(li);
            });

            recipeList.appendChild(ul);
            mainContent.appendChild(recipeList);
            console.log('Added recipe list for category:', categoryId);
        });

        console.log('All recipes rendered, triggering translation...');
        // Trigger translation after recipes are loaded
        this.triggerTranslation();
    }

    updateWithTranslatedContent(translatedCategories) {
        if (!translatedCategories) return;

        // Update recipe titles with translated content
        const recipeLinks = document.querySelectorAll('a[data-recipe-id]');
        recipeLinks.forEach(link => {
            const recipeId = link.getAttribute('data-recipe-id');
            const category = link.getAttribute('data-category');
            
            if (translatedCategories[category]) {
                const recipe = translatedCategories[category].recipes.find(r => r.id === recipeId);
                if (recipe && recipe.title) {
                    link.textContent = recipe.title;
                    console.log('Updated recipe title:', recipeId, 'â†’', recipe.title);
                }
            }
        });
    }

    triggerTranslation() {
        // Wait a bit for DOM to be ready, then trigger translation
        setTimeout(() => {
            if (window.scalableTranslator) {
                console.log('Triggering translation for loaded recipes...');
                window.scalableTranslator.updatePageContent();
            } else if (window.dynamicTranslator) {
                console.log('Fallback: Using dynamic translator for loaded recipes...');
                window.dynamicTranslator.translatePageContent();
            }
        }, 100);
    }

    renderFallback() {
        // Fallback to static content if JSON fails to load
        const mainContent = document.querySelector('.main-content');
        if (!mainContent) return;

        mainContent.innerHTML = `
            <div class="recipe-list">
                <h2>Main Courses</h2>
                <ul id="main-courses-list">
                    <li><a href="recipes/bourguignon.html">Seitan Bourguignon</a></li>
                    <li><a href="recipes/lentils_soup.html">Lentils Soup</a></li>
                    <li><a href="recipes/moussaka.html">Moussaka</a></li>
                </ul>
            </div>
            <div class="recipe-list">
                <h2>Desserts</h2>
                <ul id="dessert-list">
                    <li><a href="recipes/banana_bread.html">Banana Bread</a></li>
                    <li><a href="recipes/chocolate_truffles.html">Chocolate Truffles</a></li>
                    <li><a href="recipes/rice_pudding.html">Rice Pudding</a></li>
                </ul>
            </div>
        `;
    }

    // Get all recipes for search functionality
    getAllRecipes() {
        if (!this.recipesData || !this.recipesData.recipes) return [];
        return this.recipesData.recipes;
    }

    // Get recipes by category
    getRecipesByCategory(categoryId) {
        if (!this.recipesData || !this.recipesData.recipes) return [];
        return this.recipesData.recipes.filter(recipe => 
            recipe.tags && recipe.tags.includes(categoryId)
        );
    }
}

// Initialize recipe loader
document.addEventListener('DOMContentLoaded', () => {
    window.recipeLoader = new RecipeLoader();
}); 