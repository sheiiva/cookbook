// Recipe Loader - Dynamically loads recipes from JSON database
class RecipeLoader {
    constructor() {
        this.recipesData = null;
        this.init();
    }

    async init() {
        try {
            const response = await fetch('data/cookbook-data.json');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            this.recipesData = { 
                recipes: data.recipes, 
                categories: data.ui.categories,
                dietaryFilters: data.ui.dietary_filters 
            };
            this.renderRecipes();
        } catch (error) {
            console.error('Failed to load recipes:', error);
            this.renderFallback();
        }
    }

    renderRecipes() {
        const mainContent = document.querySelector('.main-content');
        
        if (!mainContent || !this.recipesData) {
            console.error('Missing mainContent or recipesData');
            return;
        }

        mainContent.innerHTML = '';

        // Create page layout container (breaks out of centered container)
        const pageLayout = document.createElement('div');
        pageLayout.className = 'page-layout';
        
        // Create filter container (sidebar)
        const filterContainer = document.createElement('div');
        filterContainer.className = 'category-filters';
        
        // Create dish type filters
        const dishTypeFilters = document.createElement('div');
        dishTypeFilters.className = 'filter-section dish-filters';
        dishTypeFilters.innerHTML = '<h3>Dish Types</h3>';
        
        const dishButtons = document.createElement('div');
        dishButtons.className = 'filter-buttons';
        
        Object.entries(this.recipesData.categories).forEach(([categoryId, categoryName]) => {
            const button = document.createElement('button');
            button.className = `filter-btn ${categoryId === 'all' ? 'active' : ''}`;
            button.setAttribute('data-category', categoryId);
            button.textContent = categoryName;
            dishButtons.appendChild(button);
        });
        
        dishTypeFilters.appendChild(dishButtons);
        filterContainer.appendChild(dishTypeFilters);
        
        // Create dietary filters
        const dietaryFilters = document.createElement('div');
        dietaryFilters.className = 'filter-section dietary-filters';
        dietaryFilters.innerHTML = '<h3>Dietary Options</h3>';
        
        const dietaryButtons = document.createElement('div');
        dietaryButtons.className = 'filter-buttons';
        
        Object.entries(this.recipesData.dietaryFilters).forEach(([filterId, filterName]) => {
            const button = document.createElement('button');
            button.className = 'filter-btn dietary-toggle';
            button.setAttribute('data-dietary', filterId);
            button.textContent = filterName;
            dietaryButtons.appendChild(button);
        });
        
        dietaryFilters.appendChild(dietaryButtons);
        filterContainer.appendChild(dietaryFilters);
        
        // Create content layout container
        const contentLayout = document.createElement('div');
        contentLayout.className = 'content-layout';
        
        // Create recipes container
        const recipesContainer = document.createElement('div');
        recipesContainer.className = 'recipes-container';
        
        // Add filter container and content layout to page layout
        pageLayout.appendChild(filterContainer);
        pageLayout.appendChild(contentLayout);
        
        // Add recipes container to content layout
        contentLayout.appendChild(recipesContainer);
        
        mainContent.appendChild(pageLayout);

        // Group recipes by tags
        const recipesByCategory = {};
        
        this.recipesData.recipes.forEach(recipe => {
            if (recipe.tags) {
                recipe.tags.forEach(tag => {
                    if (!recipesByCategory[tag]) {
                        recipesByCategory[tag] = [];
                    }
                    recipesByCategory[tag].push(recipe);
                });
            }
        });

        // Render each category
        Object.entries(this.recipesData.categories).forEach(([categoryId, categoryName]) => {
            const recipesInCategory = recipesByCategory[categoryId] || [];
            if (recipesInCategory.length === 0) {
                return;
            }
            
            const recipeList = document.createElement('div');
            recipeList.className = 'recipe-list';
            recipeList.id = `${categoryId}-list`;

            const title = document.createElement('h2');
            title.textContent = categoryName;
            recipeList.appendChild(title);

            const ul = document.createElement('ul');
            ul.id = `${categoryId}-list`;

            recipesInCategory.forEach(recipe => {
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.href = `recipe-template.html?id=${recipe.id}`;
                a.textContent = recipe.title;
                a.setAttribute('data-category', categoryId);
                a.setAttribute('data-recipe-id', recipe.id);
                li.appendChild(a);
                ul.appendChild(li);
            });

            recipeList.appendChild(ul);
            recipesContainer.appendChild(recipeList);
        });

        // Add filter event listeners
        this.setupFilterListeners();

        // Trigger translation after recipes are loaded
        this.triggerTranslation();
    }

    updateWithTranslatedContent(translatedCategories) {
        if (!translatedCategories) return;

        // Update recipe titles with translated content
        const recipeLinks = document.querySelectorAll('a[data-recipe-id]');
        recipeLinks.forEach(link => {
            const recipeId = link.getAttribute('data-recipe-id');
            const category = link.getAttribute('data-category');
            
            if (translatedCategories[category]) {
                const recipe = translatedCategories[category].recipes.find(r => r.id === recipeId);
                if (recipe && recipe.title) {
                    link.textContent = recipe.title;
                }
            }
        });
    }

    triggerTranslation() {
        // Wait a bit for DOM to be ready, then trigger translation
        setTimeout(() => {
            if (window.scalableTranslator) {
                window.scalableTranslator.updatePageContent();
            } else if (window.dynamicTranslator) {
                // Fallback: Using dynamic translator for loaded recipes
            }
        }, 100);
    }

    renderFallback() {
        const mainContent = document.querySelector('.main-content');
        if (mainContent) {
            mainContent.innerHTML = `
                <div class="recipe-list">
                    <h2>Recipe Loading Error</h2>
                    <p>Unable to load recipes. Please check your internet connection and try again.</p>
                </div>
            `;
        }
    }

    getAllRecipes() {
        return this.recipesData ? this.recipesData.recipes : [];
    }

    getRecipesByCategory(categoryId) {
        if (!this.recipesData) return [];
        return this.recipesData.recipes.filter(recipe => 
            recipe.tags && recipe.tags.includes(categoryId)
        );
    }

    setupFilterListeners() {
        // Dish type filter listeners
        const dishButtons = document.querySelectorAll('.dish-filters .filter-btn');
        dishButtons.forEach(button => {
            button.addEventListener('click', () => {
                const category = button.getAttribute('data-category');
                this.filterByDishType(category);
                
                // Update active state
                dishButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
            });
        });

        // Dietary filter listeners
        const dietaryButtons = document.querySelectorAll('.dietary-filters .filter-btn');
        dietaryButtons.forEach(button => {
            button.addEventListener('click', () => {
                const dietary = button.getAttribute('data-dietary');
                this.toggleDietaryFilter(dietary);
                
                // Toggle active state
                button.classList.toggle('active');
            });
        });
    }

    filterByDishType(category) {
        const recipeLists = document.querySelectorAll('.recipe-list');
        const activeDietaryFilters = this.getActiveDietaryFilters();
        
        recipeLists.forEach(recipeList => {
            const categoryId = recipeList.id.replace('-list', '');
            const shouldShow = category === 'all' || categoryId === category;
            
            if (shouldShow) {
                // Apply dietary filters
                const recipeLinks = recipeList.querySelectorAll('a[data-recipe-id]');
                recipeLinks.forEach(link => {
                    const recipeId = link.getAttribute('data-recipe-id');
                    const recipe = this.recipesData.recipes.find(r => r.id === recipeId);
                    
                    if (recipe && recipe.tags) {
                        const matchesDietary = activeDietaryFilters.length === 0 || 
                            activeDietaryFilters.some(filter => recipe.tags.includes(filter));
                        
                        link.style.display = matchesDietary ? 'flex' : 'none';
                    }
                });
                
                recipeList.style.display = 'block';
            } else {
                recipeList.style.display = 'none';
            }
        });
    }

    toggleDietaryFilter(dietary) {
        // Re-apply current dish type filter with new dietary selection
        const activeDishButton = document.querySelector('.dish-filters .filter-btn.active');
        if (activeDishButton) {
            const category = activeDishButton.getAttribute('data-category');
            this.filterByDishType(category);
        }
    }

    getActiveDietaryFilters() {
        const activeButtons = document.querySelectorAll('.dietary-filters .filter-btn.active');
        return Array.from(activeButtons).map(button => button.getAttribute('data-dietary'));
    }
}

// Initialize recipe loader
new RecipeLoader(); 