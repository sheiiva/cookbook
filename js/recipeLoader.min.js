// Recipe Loader - Dynamically loads recipes from JSON database
class RecipeLoader {
    constructor() {
        this.recipesData = null;
    }

    async init() {
        try {
            console.log('Starting to load recipes...');
            const response = await fetch('data/cookbook-data.json');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            this.recipesData = await response.json();
            console.log('Recipes data loaded:', this.recipesData);
            this.renderRecipes();
        } catch (error) {
            console.error('Failed to load recipes:', error);
            this.renderFallback();
        }
    }

    renderRecipes() {
        console.log('=== RENDERING RECIPES ===');
        console.log('Current DOM structure before rendering:');
        console.log(document.body.innerHTML);
        
        if (!this.recipesData) {
            console.error('Missing recipesData');
            return;
        }

        // Clear any existing content after header
        const header = document.querySelector('header');
        const existingContent = header.nextElementSibling;
        if (existingContent && !existingContent.classList.contains('language-switcher')) {
            console.log('Removing existing content:', existingContent);
            existingContent.remove();
        }

        // Create main container
        const mainContainer = document.createElement('div');
        mainContainer.className = 'main-container';
        console.log('Created main-container');

        // Create left panel (filters)
        const leftPanel = document.createElement('div');
        leftPanel.className = 'left-panel';
        console.log('Created left-panel');

        // Create dish type filters
        const dishTypeFilters = document.createElement('div');
        dishTypeFilters.className = 'filter-section dish-filters';
        dishTypeFilters.innerHTML = '<h3>Dish Types</h3>';
        
        const dishButtons = document.createElement('div');
        dishButtons.className = 'filter-buttons';
        
        Object.entries(this.recipesData.ui.categories).forEach(([categoryId, categoryName]) => {
            const button = document.createElement('button');
            button.className = `filter-btn ${categoryId === 'all' ? 'active' : ''}`;
            button.setAttribute('data-category', categoryId);
            button.textContent = categoryName;
            dishButtons.appendChild(button);
        });
        
        dishTypeFilters.appendChild(dishButtons);
        leftPanel.appendChild(dishTypeFilters);
        
        // Create dietary filters
        const dietaryFilters = document.createElement('div');
        dietaryFilters.className = 'filter-section dietary-filters';
        dietaryFilters.innerHTML = '<h3>Dietary Options</h3>';
        
        const dietaryButtons = document.createElement('div');
        dietaryButtons.className = 'filter-buttons';
        
        Object.entries(this.recipesData.ui.dietary_filters).forEach(([filterId, filterName]) => {
            const button = document.createElement('button');
            button.className = 'filter-btn dietary-toggle';
            button.setAttribute('data-dietary', filterId);
            button.textContent = filterName;
            dietaryButtons.appendChild(button);
        });
        
        dietaryFilters.appendChild(dietaryButtons);
        leftPanel.appendChild(dietaryFilters);

        // Create recipes area
        const recipesArea = document.createElement('div');
        recipesArea.className = 'recipes-area';

        // Add both panels to main container
        mainContainer.appendChild(leftPanel);
        mainContainer.appendChild(recipesArea);

        // Add main container after header
        header.after(mainContainer);

        // Group recipes by tags
        const recipesByCategory = {};
        
        this.recipesData.recipes.forEach(recipe => {
            if (recipe.tags) {
                recipe.tags.forEach(tag => {
                    if (!recipesByCategory[tag]) {
                        recipesByCategory[tag] = [];
                    }
                    recipesByCategory[tag].push(recipe);
                });
            }
        });

        // Render each category
        Object.entries(this.recipesData.ui.categories).forEach(([categoryId, categoryName]) => {
            const recipesInCategory = recipesByCategory[categoryId] || [];
            if (recipesInCategory.length === 0) {
                return;
            }
            
            const recipeBlock = document.createElement('div');
            recipeBlock.className = 'recipe-block';
            recipeBlock.id = `${categoryId}-block`;

            const title = document.createElement('h2');
            title.textContent = categoryName;
            recipeBlock.appendChild(title);

            const ul = document.createElement('ul');
            ul.id = `${categoryId}-list`;

            recipesInCategory.forEach(recipe => {
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.href = `recipe-template.html?id=${recipe.id}`;
                a.textContent = recipe.title;
                a.setAttribute('data-category', categoryId);
                a.setAttribute('data-recipe-id', recipe.id);
                li.appendChild(a);
                ul.appendChild(li);
            });

            recipeBlock.appendChild(ul);
            recipesArea.appendChild(recipeBlock);
        });

        // Add filter event listeners
        this.setupFilterListeners();

        // Trigger translation after recipes are loaded
        this.triggerTranslation();
        
        console.log('=== FINAL DOM STRUCTURE ===');
        console.log('Main container created:', document.querySelector('.main-container'));
        console.log('Left panel created:', document.querySelector('.left-panel'));
        console.log('Recipes area created:', document.querySelector('.recipes-area'));
        console.log('Recipe blocks created:', document.querySelectorAll('.recipe-block'));
        console.log('Final body HTML:', document.body.innerHTML);
    }

    updateWithTranslatedContent(translatedCategories) {
        if (!translatedCategories) return;

        // Update recipe titles with translated content
        const recipeLinks = document.querySelectorAll('a[data-recipe-id]');
        recipeLinks.forEach(link => {
            const recipeId = link.getAttribute('data-recipe-id');
            const category = link.getAttribute('data-category');
            
            if (translatedCategories[category]) {
                const recipe = translatedCategories[category].recipes.find(r => r.id === recipeId);
                if (recipe && recipe.title) {
                    link.textContent = recipe.title;
                }
            }
        });
    }

    triggerTranslation() {
        // Wait a bit for DOM to be ready, then trigger translation
        setTimeout(() => {
            if (window.scalableTranslator) {
                window.scalableTranslator.updatePageContent();
            } else if (window.dynamicTranslator) {
                // Fallback: Using dynamic translator for loaded recipes
            }
        }, 100);
    }

    renderFallback() {
        const header = document.querySelector('header');
        const errorDiv = document.createElement('div');
        errorDiv.className = 'recipe-block';
        errorDiv.innerHTML = `
            <h2>Recipe Loading Error</h2>
            <p>Unable to load recipes. Please check your internet connection and try again.</p>
        `;
        header.after(errorDiv);
    }

    getAllRecipes() {
        return this.recipesData ? this.recipesData.recipes : [];
    }

    getRecipesByCategory(categoryId) {
        if (!this.recipesData) return [];
        return this.recipesData.recipes.filter(recipe => 
            recipe.tags && recipe.tags.includes(categoryId)
        );
    }

    setupFilterListeners() {
        // Dish type filter listeners
        document.querySelectorAll('.filter-btn[data-category]').forEach(btn => {
            btn.addEventListener('click', () => {
                const category = btn.getAttribute('data-category');
                this.filterByDishType(category);
                
                // Update active state
                document.querySelectorAll('.filter-btn[data-category]').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });

        // Dietary filter listeners
        document.querySelectorAll('.dietary-toggle').forEach(btn => {
            btn.addEventListener('click', () => {
                const dietary = btn.getAttribute('data-dietary');
                this.toggleDietaryFilter(dietary);
                btn.classList.toggle('active');
            });
        });
    }

    filterByDishType(category) {
        const recipeBlocks = document.querySelectorAll('.recipe-block');
        
        recipeBlocks.forEach(block => {
            const blockId = block.id;
            const categoryId = blockId.replace('-block', '');
            
            if (category === 'all' || categoryId === category) {
                block.style.display = 'block';
            } else {
                block.style.display = 'none';
            }
        });
        
        // Also apply any active dietary filters
        const activeDietaryFilters = this.getActiveDietaryFilters();
        if (activeDietaryFilters.length > 0) {
            activeDietaryFilters.forEach(filter => {
                this.toggleDietaryFilter(filter);
            });
        }
    }

    toggleDietaryFilter(dietary) {
        const activeFilters = this.getActiveDietaryFilters();
        console.log('Active dietary filters:', activeFilters);
        console.log('Toggling filter:', dietary);
        
        const recipeLinks = document.querySelectorAll('a[data-recipe-id]');
        console.log('Found recipe links:', recipeLinks.length);
        
        // Track which sections have visible recipes
        const sectionVisibility = {};
        
        recipeLinks.forEach(link => {
            const recipeId = link.getAttribute('data-recipe-id');
            const recipe = this.recipesData.recipes.find(r => r.id === recipeId);
            
            if (recipe && recipe.tags) {
                const hasDietaryTag = recipe.tags.includes(dietary);
                const parentLi = link.parentElement;
                const parentBlock = parentLi.closest('.recipe-block');
                const sectionId = parentBlock ? parentBlock.id : null;
                
                console.log(`Recipe ${recipeId}: has ${dietary} tag = ${hasDietaryTag}`);
                
                if (activeFilters.length === 0 || hasDietaryTag) {
                    parentLi.style.display = 'list-item';  // Show with bullet point
                    console.log(`Showing ${recipeId}`);
                    if (sectionId) {
                        sectionVisibility[sectionId] = true;
                    }
                } else {
                    parentLi.style.display = 'none';  // Hide completely
                    console.log(`Hiding ${recipeId}`);
                    if (sectionId && !sectionVisibility[sectionId]) {
                        sectionVisibility[sectionId] = false;
                    }
                }
            }
        });
        
        // Hide/show sections based on whether they have visible recipes
        Object.entries(sectionVisibility).forEach(([sectionId, hasVisibleRecipes]) => {
            const section = document.getElementById(sectionId);
            if (section) {
                if (hasVisibleRecipes) {
                    section.style.display = 'block';
                    console.log(`Showing section: ${sectionId}`);
                } else {
                    section.style.display = 'none';
                    console.log(`Hiding section: ${sectionId}`);
                }
            }
        });
    }

    getActiveDietaryFilters() {
        return Array.from(document.querySelectorAll('.dietary-toggle.active'))
            .map(btn => btn.getAttribute('data-dietary'));
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const recipeLoader = new RecipeLoader();
    recipeLoader.init();
}); 