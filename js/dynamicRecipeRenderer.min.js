// Dynamic Recipe Renderer
class DynamicRecipeRenderer {
    constructor() {
        this.recipeData = null;
        this.currentLanguage = 'en';
    }

    async loadRecipe(recipeId) {
        try {
            console.log('=== LOADING RECIPE ===');
            console.log('Recipe ID:', recipeId);
            
            const response = await fetch('data/cookbook-data.json');
            console.log('Fetch response:', response);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            console.log('Cookbook data loaded:', data);
            
            // Find the recipe in the data
            let recipe = null;
            if (data.recipes) {
                console.log('Searching in recipes array:', data.recipes.length, 'recipes');
                recipe = data.recipes.find(r => r.id === recipeId);
                if (recipe) {
                    console.log('Recipe found in recipes array');
                }
            }
            
            if (!recipe) {
                throw new Error(`Recipe ${recipeId} not found`);
            }
            
            this.recipeData = recipe;
            console.log('Recipe loaded successfully:', recipe);
            return recipe;
        } catch (error) {
            console.error('Failed to load recipe:', error);
            return null;
        }
    }

    renderRecipe(container) {
        console.log('=== RENDERING RECIPE ===');
        console.log('Recipe data:', this.recipeData);
        console.log('Container:', container);
        
        if (!this.recipeData || !container) {
            console.error('Missing recipe data or container');
            return;
        }

        console.log('Rendering recipe:', this.recipeData.title);
        
        // Clear container
        container.innerHTML = '';
        
        // Create recipe structure
        const recipeDiv = document.createElement('div');
        recipeDiv.className = 'recipe';
        
        // Title
        const title = document.createElement('h2');
        title.textContent = this.recipeData.title;
        recipeDiv.appendChild(title);
        console.log('Added title:', this.recipeData.title);
        
        // Image
        if (this.recipeData.image) {
            const img = document.createElement('img');
            img.src = `images/${this.recipeData.image}`;
            img.alt = `${this.recipeData.title} Photo`;
            recipeDiv.appendChild(img);
            console.log('Added image:', this.recipeData.image);
        }
        
        // Ingredients
        this.renderIngredients(recipeDiv);
        
        // Instructions
        this.renderInstructions(recipeDiv);
        
        container.appendChild(recipeDiv);
        console.log('Recipe rendering completed');
    }

    renderIngredients(container) {
        console.log('=== RENDERING INGREDIENTS ===');
        console.log('Recipe data for ingredients:', this.recipeData);
        
        const ingredientsTitle = document.createElement('h3');
        ingredientsTitle.textContent = 'Ingredients:';
        container.appendChild(ingredientsTitle);
        console.log('Added ingredients title');
        
        const ingredientsList = document.createElement('ul');
        
        // Main ingredients
        if (this.recipeData.ingredients) {
            console.log('Main ingredients found:', this.recipeData.ingredients);
            this.recipeData.ingredients.forEach(ingredient => {
                const li = document.createElement('li');
                li.textContent = ingredient;
                ingredientsList.appendChild(li);
                console.log('Added ingredient:', ingredient);
            });
        } else {
            console.log('No main ingredients found');
        }
        
        // Additional ingredient sections (like bÃ©chamel for moussaka)
        if (this.recipeData.ingredient_sections) {
            console.log('Ingredient sections found:', this.recipeData.ingredient_sections);
            Object.entries(this.recipeData.ingredient_sections).forEach(([sectionName, ingredients]) => {
                const sectionTitle = document.createElement('h4');
                sectionTitle.textContent = `For the ${sectionName}:`;
                container.appendChild(sectionTitle);
                console.log('Added section title:', sectionName);
                
                const sectionList = document.createElement('ul');
                ingredients.forEach(ingredient => {
                    const li = document.createElement('li');
                    li.textContent = ingredient;
                    sectionList.appendChild(li);
                    console.log('Added section ingredient:', ingredient);
                });
                container.appendChild(sectionList);
            });
        } else {
            console.log('No ingredient sections found');
        }
        
        container.appendChild(ingredientsList);
        console.log('Ingredients rendering completed');
    }

    renderInstructions(container) {
        console.log('=== RENDERING INSTRUCTIONS ===');
        console.log('Recipe data for instructions:', this.recipeData);
        
        const instructionsTitle = document.createElement('h3');
        instructionsTitle.textContent = 'Instructions:';
        container.appendChild(instructionsTitle);
        console.log('Added instructions title');
        
        // Check if recipe has instruction blocks (complex recipe like moussaka)
        if (this.recipeData.instruction_blocks) {
            this.renderInstructionBlocks(container);
        } else if (this.recipeData.instructions) {
            // Simple recipe with just a list of instructions
            this.renderSimpleInstructions(container);
        } else {
            console.log('No instructions found');
        }
        console.log('Instructions rendering completed');
    }

    renderInstructionBlocks(container) {
        console.log('Rendering instruction blocks:', this.recipeData.instruction_blocks);
        Object.entries(this.recipeData.instruction_blocks).forEach(([blockKey, block]) => {
            const blockTitle = document.createElement('h5');
            blockTitle.textContent = block.title;
            container.appendChild(blockTitle);
            console.log('Added instruction block title:', block.title);
            
            const stepsList = document.createElement('ol');
            block.steps.forEach(step => {
                const li = document.createElement('li');
                li.textContent = step;
                stepsList.appendChild(li);
                console.log('Added instruction block step:', step);
            });
            container.appendChild(stepsList);
        });
    }

    renderSimpleInstructions(container) {
        console.log('Rendering simple instructions:', this.recipeData.instructions);
        const stepsList = document.createElement('ol');
        this.recipeData.instructions.forEach(instruction => {
            const li = document.createElement('li');
            li.textContent = instruction;
            stepsList.appendChild(li);
            console.log('Added simple instruction:', instruction);
        });
        container.appendChild(stepsList);
    }

    // Update recipe content with translated data
    updateWithTranslatedContent(translatedRecipe) {
        if (!translatedRecipe) return;
        
        this.recipeData = translatedRecipe;
        
        // Re-render the recipe
        const container = document.querySelector('.container .recipe');
        if (container) {
            this.renderRecipe(container.parentElement);
        }
    }
}

// Initialize dynamic recipe renderer
window.dynamicRecipeRenderer = new DynamicRecipeRenderer(); 